def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartEnvironmentVariables = [
        ANDROID_FLOSS: false,
];

if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        if (dartEnvironmentVariables.ANDROID_FLOSS) {
            applicationId "app.ehrenamtskarte.bayern.floss"
        } else {
            applicationId "de.nrw.it.giz.ehrensache.bayern.android"
        }
        minSdkVersion 20
        targetSdkVersion 30
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        localProps {
            keyAlias localProperties.getProperty('signing.keyAlias')
            keyPassword localProperties.getProperty('signing.keyPassword')
            storeFile file(localProperties.getProperty('signing.storeFile'))
            storePassword localProperties.getProperty('signing.storePassword')
        }
    }

    buildTypes {
        release {
            if (localProperties.containsKey("signing.keyAlias")) {
                signingConfig signingConfigs.localProps
            } else {
                signingConfig signingConfigs.debug
            }

            
            // We need to configure proguard here because of some bug which occurred when adding flutter dependencies,
            // probably involving image-picker.
            // The workaround is from https://github.com/flutter/flutter/issues/58479.
            // Also have a look at https://github.com/ehrenamtskarte/ehrenamtskarte/issues/340
            // As of flutter_plugin_android_lifecycle 2.0.1, this should no longer be necessary.
            // Once upgrading to that version, we can remove the next line together with proguard-rules.pro.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        // Exclude mapbox-android-accounts because of its proprietary license
        variant.getCompileConfiguration().exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-accounts'
        variant.getRuntimeConfiguration().exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-accounts'

        // If we create a FLOSS build, then we want to exclude GMS
        if (dartEnvironmentVariables.ANDROID_FLOSS) {
            variant.getCompileConfiguration().exclude group: 'com.google.android.gms', module: 'play-services-location'
            variant.getRuntimeConfiguration().exclude group: 'com.google.android.gms', module: 'play-services-location'
        }
    }
    
    packagingOptions {
        
        // Exclude x86 because the app size in F-Droid is limited to 30MB
        if (dartEnvironmentVariables.SHRINK_NATIVE) {
            exclude 'lib/x86**'
        }
    }
}

flutter {
    source '../..'
    target 'lib/main_prod.dart'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
