// This file originally stems from a CRA-eject.
import chalk from 'chalk'
import { choosePort, createCompiler, prepareProxy, prepareUrls } from 'react-dev-utils/WebpackDevServerUtils'
import checkRequiredFiles from 'react-dev-utils/checkRequiredFiles'
import clearConsole from 'react-dev-utils/clearConsole'
import openBrowser from 'react-dev-utils/openBrowser'
import webpack from 'webpack'
import WebpackDevServer from 'webpack-dev-server'

import getPaths from '../config/getPaths'
import configFactory from '../config/webpack.config'
import createDevServerConfig from '../config/webpackDevServer.config'

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development'
process.env.NODE_ENV = 'development'

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err
})

const isInteractive = process.stdout.isTTY

const paths = getPaths()

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1)
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT || '', 10) || 3000
const HOST = process.env.HOST || '0.0.0.0'

if (process.env.HOST) {
  console.log(
    chalk.cyan(`Attempting to bind to HOST environment variable: ${chalk.yellow(chalk.bold(process.env.HOST))}`)
  )
  console.log(`If this was unintentional, check that you haven't mistakenly set it in your shell.`)
  console.log(`Learn more here: ${chalk.yellow('https://cra.link/advanced-config')}`)
  console.log()
}

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('react-dev-utils/browsersHelper')

checkBrowsers(paths.appPath, isInteractive)
  .then(() => 
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
     choosePort(HOST, DEFAULT_PORT)
  )
  .then((port: number | null) => {
    if (port == null) {
      // We have not found a port.
      return
    }

    const config = configFactory('development')
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
    const appName = require(paths.appPackageJson).name

    // @ts-expect-error prepareUrls typed incorrectly
    const urls = prepareUrls(protocol, HOST, port, paths.publicUrlOrPath.slice(0, -1))
    // Create a webpack compiler that is configured with custom messages.
    // @ts-expect-error devSocket actually not required
    const compiler = createCompiler({
      appName,
      config,
      urls,
      useYarn: false,
      useTypeScript: true,
      webpack,
    })
    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic, paths.publicUrlOrPath)
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = {
      ...createDevServerConfig(proxyConfig, urls.lanUrlForConfig),
      host: HOST,
      port,
    }
    const devServer = new WebpackDevServer(serverConfig, compiler)
    // Launch WebpackDevServer.
    devServer.startCallback(() => {
      if (isInteractive) {
        clearConsole()
      }
      console.log(chalk.cyan('Starting the development server...\n'))
      openBrowser(urls.localUrlForBrowser)
    })
    ;['SIGINT', 'SIGTERM'].forEach(sig => {
      process.on(sig, () => {
        devServer.close()
        process.exit()
      })
    })

    if (process.env.CI !== 'true') {
      // Gracefully exit when stdin ends
      process.stdin.on('end', () => {
        devServer.close()
        process.exit()
      })
    }
  })
  .catch((err: unknown) => {
    if (err instanceof Error) {
      console.log(err.message)
    }
    process.exit(1)
  })
