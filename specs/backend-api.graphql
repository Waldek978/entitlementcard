schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type AcceptingStore {
  category: Category!
  categoryId: Int!
  contact: Contact!
  contactId: Int!
  description: String
  id: Int!
  name: String
  physicalStore: PhysicalStore
}

type Address {
  id: Int!
  location: String
  postalCode: String
  state: String
  street: String
}

type Category {
  id: Int!
  name: String!
}

type Contact {
  email: String
  id: Int!
  telephone: String
  website: String
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type Mutation {
  "Stores a new digital EAK"
  addCard(card: CardGenerationModelInput!): Boolean!
}

type PhysicalStore {
  address: Address!
  addressId: Int!
  coordinates: Coordinates!
  id: Int!
  store: AcceptingStore!
  storeId: Int!
}

type Query {
  "Return list of all categories."
  categories: [Category!]!
  "Return list of all accepting stores."
  physicalStores: [PhysicalStore!]!
  "Returns list of all accepting stores queried by ids."
  physicalStoresById(params: IdsParamsInput!): [PhysicalStore!]!
  "Return list of all regions."
  regions: [Region!]!
  "Search for accepting stores using searchText and categoryIds."
  searchAcceptingStores(params: SearchParamsInput!): [AcceptingStore!]!
  "Returns whether there is a card with that hash registered for that this TOTP is currently valid"
  verifyCard(card: CardVerificationModelInput!): Boolean!
}

type Region {
  id: Int!
  name: String!
  prefix: String!
  regionIdentifier: String!
}

"Long type"
scalar Long

input CardGenerationModelInput {
  cardDetailsHashBase64: String!
  expirationDate: Long!
  regionId: Int!
  totpSecretBase64: String!
}

input CardVerificationModelInput {
  cardDetailsHashBase64: String!
  totp: Int!
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

input IdsParamsInput {
  ids: [Int!]!
}

input SearchParamsInput {
  categoryIds: [Int!]
  coordinates: CoordinatesInput
  limit: Int
  offset: Long
  searchText: String
}
