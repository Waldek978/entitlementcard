schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type AcceptingStore {
  category: Category!
  categoryId: Int!
  contact: Contact!
  contactId: Int!
  description: String
  id: Int!
  name: String
  physicalStore: PhysicalStore
}

type Address {
  id: Int!
  location: String
  postalCode: String
  state: String
  street: String
}

type Category {
  id: Int!
  name: String!
}

type Contact {
  email: String
  id: Int!
  telephone: String
  website: String
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type Mutation {
  "Stores a new blue digital EAK"
  addBlueEakApplication(application: BlueCardApplicationInput!, regionId: Int!): Boolean!
  "Stores a new digital EAK"
  addCard(card: CardGenerationModelInput!): Boolean!
  "Stores a new golden digital EAK"
  addGoldenEakApplication(application: GoldenEakCardApplicationInput!, regionId: Int!): Boolean!
}

type PhysicalStore {
  address: Address!
  addressId: Int!
  coordinates: Coordinates!
  id: Int!
  store: AcceptingStore!
  storeId: Int!
}

type Query {
  "Return list of all categories."
  categories: [Category!]!
  "Return list of all accepting stores."
  physicalStores: [PhysicalStore!]!
  "Returns list of all accepting stores queried by ids."
  physicalStoresById(params: IdsParamsInput!): [PhysicalStore!]!
  "Return list of all regions."
  regions: [Region!]!
  "Search for accepting stores using searchText and categoryIds."
  searchAcceptingStores(params: SearchParamsInput!): [AcceptingStore!]!
  "Returns whether there is a card with that hash registered for that this TOTP is currently valid"
  verifyCard(card: CardVerificationModelInput!): Boolean!
}

type Region {
  id: Int!
  name: String!
  prefix: String!
  regionIdentifier: String!
}

enum AmountOfWorkUnit {
  HOURS_PER_WEEK
  HOURS_PER_YEAR
}

enum ApplicationType {
  FIRST_APPLICATION
  RENEWAL_APPLICATION
}

enum BlueCardEntitlementType {
  Juleica
  Service
  Standard
}

enum BlueCardServiceEntitlementActivity {
  DisasterControl
  FireDepartment
  RescueService
}

enum GoldenCardEntitlementType {
  HONOR_BY_MINISTER_PRESIDENT
  SERVICE_AWARD
  STANDARD
}

"Long type"
scalar Long

"A file part in a multipart request"
scalar Upload

input AttachmentInput {
  data: Upload!
  fileName: String!
}

input BlueCardApplicationInput {
  applicationType: ApplicationType!
  entitlement: BlueCardEntitlementInput!
  givenInformationIsCorrectAndComplete: Boolean!
  hasAcceptedPrivacyPolicy: Boolean!
  personalData: PersonalDataInput!
}

"""
Entitlement for blue EAK.
    Either entitlementType == Juleica and juleicaNumber, juleicaExpirationDate, copyOfJuleica are not null
    or     entitlementType == Service and serviceActivity, serviceCertification are not null
    or     entitlementType == Standard and workAtOrganizations is not null
"""
input BlueCardEntitlementInput {
  copyOfJuleica: AttachmentInput
  entitlementType: BlueCardEntitlementType!
  juleicaExpirationDate: String
  juleicaNumber: String
  serviceActivity: BlueCardServiceEntitlementActivity
  serviceCertificate: AttachmentInput
  workAtOrganizations: [WorkAtOrganizationInput!]
}

input CardGenerationModelInput {
  cardDetailsHashBase64: String!
  expirationDate: Long!
  regionId: Int!
  totpSecretBase64: String!
}

input CardVerificationModelInput {
  cardDetailsHashBase64: String!
  totp: Int!
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

input GoldenCardEntitlementInput {
  certificate: AttachmentInput
  goldenEntitlementType: GoldenCardEntitlementType!
  workAtOrganizations: [WorkAtOrganizationInput!]
}

input GoldenEakCardApplicationInput {
  entitlement: GoldenCardEntitlementInput!
  givenInformationIsCorrectAndComplete: Boolean!
  hasAcceptedPrivacyPolicy: Boolean!
  personalData: PersonalDataInput!
}

input IdsParamsInput {
  ids: [Int!]!
}

input OrganizationContactInput {
  email: String!
  hasGivenPermission: Boolean!
  name: String!
  telephone: String!
}

input OrganizationInput {
  address: String!
  contact: OrganizationContactInput!
  name: String!
  "Link zu Website oder Satzung"
  website: String
}

input PersonalDataInput {
  addressSupplement: String
  dateOfBirth: String!
  emailAddress: String!
  forenames: String!
  gender: String
  houseNumber: String!
  location: String!
  nationality: String
  postalCode: String!
  street: String!
  surname: String!
  telephone: String
  title: String
}

input SearchParamsInput {
  categoryIds: [Int!]
  coordinates: CoordinatesInput
  limit: Int
  offset: Long
  searchText: String
}

input WorkAtOrganizationInput {
  amountOfWork: Float!
  amountOfWorkUnit: AmountOfWorkUnit!
  certificate: AttachmentInput!
  organization: OrganizationInput!
}
